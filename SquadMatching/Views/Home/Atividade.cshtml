@model SquadMatching.Models.AtividadeModel
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{ Layout = "_LayoutAtividade";}
<link rel="stylesheet" href="~/css/Atividade.css" />
<div class="ContainerAtividade">
    <sidebar>
        <div style="width:100%;">
            <div style="color:black;text-align:center;padding-top:14px;font-family: 'Poppins', sans-serif;">ALUNOS</div>
            <hr style="border-width:2px;border-style:inset;border-color:black" />
        </div>

        @{
            foreach (var alunos in Model.Alunos)
            {<div id="Aluno" class="labelProfilePic" style="margin-bottom:10px;width:100%;">
                    <img src="~/images/ProfilePics/@alunos.imgPath" />
                    <h6 id="NomeAlunoH" style="opacity:1;color:black"> @alunos.Nome</h6>
                </div>
                <br />
            }
        }
    </sidebar>
    <corpo>
        <div id="Grupo"></div>
        <div id="Atividade">
            <div id="CorpoAtividade">
                <h1 style="text-align:center;color:black">DESCRIÇÃO</h1>
                <h5 style="color:black; text-align:center; margin-bottom:20px;">
                    @Model.Descricao
                </h5>
                <h5 style="text-align:center;color:black">HABILIDADES NECESSARIAS PARA REALIZAR A ATIVIDADE</h5>
                @{var i = 0;
            foreach (var habilidades in Model.Habilidades)
            {
                i++;
                        <h5 style="text-align:center;color:black;">@i - @habilidades</h5>
            }

                }
                <div style="margin-left:41%;margin-right:25%">
                    @{if (Model.CD_Status.Equals("True") && @HttpContextAccessor.HttpContext.Session.GetString("EProfessor") == "False")
            {
                            <button class="btn btn-danger" id="TesteBTN">Abrir</button>
            }
            else if (Model.CD_Status.Equals("False") && ViewBag.Ativo == "True" && @HttpContextAccessor.HttpContext.Session.GetString("EProfessor") == "False")
            { <button class="btn btn-danger" onclick="location.href = '@Url.Action("AvaliarGrupo", "Home")'">Avaliar</button>}


                    }
                    @{ if (@HttpContextAccessor.HttpContext.Session.GetString("EProfessor") == "True" && Model.CD_Status.Equals("True"))
            {
                            <button class="btn btn-dark" id="Finalizar">Finalizar</button>
            } }
                    @{
            if (Model.CD_Status.Equals("False") && @HttpContextAccessor.HttpContext.Session.GetString("EProfessor") == "True")
            {
                            <button class="btn btn-danger" id="AvaliarGrupos">Avaliar</button>
            }
                    }
                    @{ if (ViewBag.PendenciasQNT > 0 && ViewBag.ESquadMaster is true)
            {
                            <button class="btn btn-danger" id="PendenciaBTN"> Pendencias: @ViewBag.PendenciasQNT</button>} }




                </div>
            </div>
            @{if (@HttpContextAccessor.HttpContext.Session.GetString("EProfessor") == "False")
                {<div id="DisplayConcentric"></div>}
                }

        </div>
    </corpo>
</div>

@section scripts{
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
    <script src="~/radial-progress-bar-master/radial-progress-bar.js"></script>

    <script>
        console.log(@Model.CD_Status.ToString().ToLower())
        console.log(@ViewBag.Ativo.ToString().ToLower())

       console.log(@HttpContextAccessor.HttpContext.Session.GetString("EProfessor").ToString().ToLower())
        $("#GetMedia").click(function () {
            var Habilidades = GetHab(teste);

        })
         $("#GetMedia").click(function () {

            var Habilidades = GetHab(teste);
        })
        var teste2 = @HttpContextAccessor.HttpContext.Session.GetString("ATIVIDADESTATUS").ToString().ToLower();

        if (teste2 = 'false') {
            var Habilidades = GetHab(teste);
            var NotaAtividade = GetNota(ShowNota);
        }
        $("#DisplayConcentric").ready(function () {
            console.log("carregado")
        })
          
        function teste(resultado) {
            /*var testando = resultado;
            console.log(testando);
            console.log(resultado);
            console.log(Object.values(resultado));
            var teste = Object.entries(resultado);
            console.log(teste.entries())*/
            var ArrayHab = [];
            for (item in resultado) {
                ArrayHab.push(resultado[item]);
            }
            console.log(ArrayHab);
            console.log(ArrayHab.length);
            for (var i = 0; i < ArrayHab.length; i++) {
                console.log("teste");
                var div = document.createElement('div');
                div.setAttribute("id", i.toString());
                
               div.style.marginRight='20px';

                var div2 = document.createElement('div');
                div2.setAttribute("class","BoxHab")

                var header = document.createElement('header');
                var Habilidade = document.createTextNode(ArrayHab[i].descricao);
                header.style.textAlign = 'center';
                header.appendChild(div);


                var footer = document.createElement('footer');
                footer.appendChild(Habilidade);
                footer.style.textAlign = 'center';

                div2.appendChild(header);
                div2.appendChild(footer);





                div2.style.cssFloat = "left"
                div2.style.alignContent="center"
                var Atividade = document.getElementById("DisplayConcentric");
                Atividade.appendChild(div2)
                CriarConcentric(i,((ArrayHab[i].rating*100)/5))


            }
        }

        function GetHab(callback) {
              $.ajax({
                type: "POST",
                url: '/Home/MediaAlunoGrupo',
                dataType: "json",
                  success: callback
            })
        }

        function GetNota(callback) {
             $.ajax({
                type: "POST",
                url: '/Home/GetAlunoNotaAtividade',
                dataType: "json",
                  success: callback
            })
        }
        function ShowNota(resultado) {
             var div = document.createElement('div');
                div.setAttribute("id", "NotaAtividade");
               // div.style.marginRight='20px';
                console.log("Resultado:" +resultado)
                var div2 = document.createElement('div');
                div2.style.marginLeft="30px;"


                var header = document.createElement('header');
                var Habilidade = document.createTextNode("NOTA ATIVIDADE");
                header.style.textAlign = 'center';
                header.appendChild(div);


                var footer = document.createElement('footer');
                footer.appendChild(Habilidade);

                div2.appendChild(header);
                div2.appendChild(footer);





            div2.style.cssFloat = "left";
            div2.style.alignContent = "center";
            div2.style.margin = "20px";

                var Atividade = document.getElementById("DisplayConcentric");
                Atividade.appendChild(div2)
                CriarConcentric("NotaAtividade",((resultado*100)/5))
        }
         
        $(document).ready(function () {


        })
        $("#TesteBTN").click(function () {
            $("#Grupo").load('@Url.Action("TesteView","Home")');

        })
        $("#PendenciaBTN").click(function () {
            $("#Grupo").load('@Url.Action("VerPendencias", "Home")');
        })

         $("#DisplayConcentric").on('click','.BoxHab',function () {
             var habilidades = $(this).children("footer").text()
             console.log(habilidades)
             var habilidade =habilidades.replace(/ /g,"%")
             $("#Grupo").load('@Url.Action("VerAvaliacoes","Home")?Habilidade='+habilidade);
        })

        $("#Finalizar").click(function () {
            $.ajax({

                url: "/Home/FinalizarAtividade",
                type: "POST",
                dataType: "json",
                data: {},
                success: function () {
                    console.log("Teste")




                },

            }),
                $("#Finalizar").remove();

        })
        $("#AvaliarGrupos").click(function () {
            $("#Grupo").load('@Url.Action("ProfAvalia","Home")')
        }),

            (function($){

function radialProgress($obj, options) {
  var defaults = {
    "inline": true,
    "font-size": 40,
    "font-family": "Helvetica, Arial, sans-serif",
    "text-color": null,
    "lines": 1,
    "line": 0,
    "symbol": "",
    "margin": 0,
    "color": "rgb(55,123,181)",
    "background": "rgba(0,0,0,0.1)",
    "size": $obj.outerWidth(),
    "fill": "5px",
    "range": [0, 100]
  };
  this.options = $.extend(defaults, options);

  this.first_rot_base = -135;
  this.second_rot_base = -315;

  this.options['size'] = parseInt(this.options['size'], 10);
  this.options['fill'] = parseInt(this.options['fill'], 10);
  this.options['font-size'] = parseInt(this.options['font-size'], 10);
  this.options['margin'] = Math.max(0, parseInt(this.options['margin'], 10));
  this.options['text-color'] = this.options['text-color'] || this.options['color'];

  $obj.css({
    "position": "relative",
    "width": this.options['size'],
    "height": this.options['size'],
    "display": this.options['inline'] ? "inline-block" : "block"
  });

  this.$radialBackground = $("<div>").appendTo($obj).css({
    "box-sizing": "border-box",
    "-moz-box-sizing": "border-box",
    "-webkit-box-sizing": "border-box",
    "position": "absolute",
    "top": this.options['margin'],
    "left": this.options['margin'],
    "width": this.options['size'] - this.options['margin'] * 2,
    "height": this.options['size'] - this.options['margin'] * 2,
    "border": this.options['fill'] + "px solid " + this.options['background'],
    "border-radius": Math.ceil(this.options['size'] / 2) + "px",
  });

  this.$radialFirstHalfMask = $("<div>").appendTo($obj).css({
    "position": "absolute",
    "top": this.options['margin'],
    "right": this.options['margin'],
    "width": Math.round(this.options['size'] / 2) - this.options['margin'],
    "height": this.options['size'] - this.options['margin'] * 2,
    "overflow": "hidden"
  });

  this.$radialSecondHalfMask = $("<div>").appendTo($obj).css({
    "position": "absolute",
    "top": this.options['margin'],
    "left": this.options['margin'],
    "width": Math.round(this.options['size'] / 2) - this.options['margin'],
    "height": this.options['size'] - this.options['margin'] * 2,
    "overflow": "hidden"
  });

  this.$radialFirstHalf = $("<div>").appendTo(this.$radialFirstHalfMask).css({
    "box-sizing": "border-box",
    "-moz-box-sizing": "border-box",
    "-webkit-box-sizing": "border-box",
    "position": "absolute",
    "top": "0px",
    "border-width": this.options['fill'],
    "border-style": "solid",
    "border-color": this.options['color'] + " " + this.options['color'] + " transparent transparent",
    "width": "200%",
    "height": "100%",
    "border-radius": "50%",
    "left": "-100%",
    "transform": "rotate(" + this.first_rot_base + "deg)"
  });

  this.$radialSecondHalf = $("<div>").appendTo(this.$radialSecondHalfMask).css({
    "box-sizing": "border-box",
    "-moz-box-sizing": "border-box",
    "-webkit-box-sizing": "border-box",
    "position": "absolute",
    "top": "0px",
    "border-width": this.options['fill'],
    "border-style": "solid",
    "border-color": this.options['color'] + " " + this.options['color'] + " transparent transparent",
    "width": "200%",
    "height": "100%",
    "border-radius": "50%",
    "left": "0px",
    "transform": "rotate(" + this.second_rot_base + "deg)"
  });

  if (this.options['text-color']) {
    this.$radialLabel = $("<div>").appendTo($obj).css({
      "position": "absolute",
      "font-size": this.options['font-size'] + "px",
      "font-family": this.options['font-family'],
      "color": this.options['text-color'],
      "left": "50%",
      "top": "50%",
      "transform": "translate(-50%, -50%)"
    });
  }

  this.perc = 0;
  this.queue = [];
}

radialProgress.prototype.toPerc = function(options) {
  var self = this,
      offset = options['offset'] || 0,
      interval_delay = 10,
      time = options['time'] || 1000,
      targetPerc = Math.max(0, Math.min(100, (options['perc'] - self.options['range'][0]) / (self.options['range'][1] - self.options['range'][0]) * 100)),
      diffPerc = targetPerc - this.perc,
      direction = diffPerc / Math.abs(diffPerc),
      step = diffPerc / (time / interval_delay);
  if (!this.animation) {
    this.animation = setInterval(function() {
      if ((direction > 0 && self.perc >= targetPerc) || (direction < 0 && self.perc <= targetPerc)) {
        window.clearInterval(self.animation);
        self.animation = null;
        var next = self.queue.shift();
        if (next) self.toPerc(next);
        return;
      }
      self.perc += step;
      var first_rot = self.first_rot_base;
      var second_rot = self.second_rot_base;
      if (self.perc < 50) {
        first_rot = self.first_rot_base + (self.perc / 50) * 180;
        second_rot = self.second_rot_base;
      } else {
        first_rot = self.first_rot_base + 1 * 180;
        second_rot = self.second_rot_base + ((self.perc - 50) / 50) * 180;
      }
      self.$radialFirstHalf.css({
        "transform": "rotate(" + first_rot + "deg)"
      });
      self.$radialSecondHalf.css({
        "transform": "rotate(" + second_rot + "deg)"
      });
      if (self.$radialLabel) {
        var value = targetPerc ? self.perc/targetPerc * (targetPerc - offset) : 0;
        value = self.options['range'][0] + value / 100 * (self.options['range'][1] - self.options['range'][0]);
        var text = Math.round(value + self.options['symbol']);
        for (var ti = 0; ti < self.options['line']; ti++) text = "&nbsp;<br>" + text;
        for (var ti = self.options['lines'] - (self.options['line'] + 1); ti > 0; ti--) text = text + "<br>&nbsp;";
        self.$radialLabel.html(text);
      }
    }, interval_delay);
  } else {
    this.queue.push(options);
  }
};

$.fn.radialProgress = function(func, options) {
  if (func === "init") {
    $(this).data("__radialProgress", new radialProgress($(this), options));
  } else if ($(this).data("__radialProgress")) {
    if (func === "to") $(this).data("__radialProgress").toPerc(options)
  }
  return this;
};

$.fn.radialPieChart = function(func, options) {
  if (func === "init") {
    var sum = options['data'].reduce(function(a, item) {
      return a + item.perc;
    }, 0);
    for (var i = 0; i < options['data'].length; i++) {
      $(this).data("__pieChartSegment" + i, new radialProgress($(this), $.extend(options, options['data'][i], {'lines': options['data'].length, 'line': i })));
      $(this).data("__pieChartSegment" + i).toPerc({'perc': sum, 'offset': sum - options['data'][i].perc});
      sum -= options['data'][i].perc;
    }
  }
  return this;
};

$.fn.radialMultiProgress = function(func, options) {
  if (func === "init") {
    var space = options['space'] || 2,
        segmentFill = Math.floor(options['fill'] / options['data'].length) - space,
        margin = 0;
    for (var i = 0; i < options['data'].length; i++) {
      $(this).data("__multiProgress" + i, new radialProgress($(this), $.extend(options, options['data'][i], {'fill': segmentFill, 'margin': margin, 'lines': options['data'].length, 'line': i })));
      margin += segmentFill + space;
    }
  }
  else if (options['index'] !== undefined) {
    if ($(this).data("__multiProgress" + options['index'])) {
      if (func === "to") $(this).data("__multiProgress" + options['index']).toPerc(options);
    }
  }
  else if (options['list'] !== undefined) {
    for (var i = 0; i < options['list'].length; i++) {
      if (func === "to") $(this).data("__multiProgress" + options['list'][i]['index']).toPerc(options['list'][i]);
    }
  }
  return this;
};

})(jQuery);

        function CriarConcentric(id, perc) {
            console.log(id)
            jQuery("#" + id).radialProgress("init", {

  'size': 100,
  'fill':10,'color':"#eb0e28"
}).radialProgress("to", {'perc': perc, 'time': 5000});
        };

         function Detalhes(id) {
        $("#LabelPendencia").load('@Url.Action("ShowDetalhes","Home")?id='+id);
    }

    </script>
}